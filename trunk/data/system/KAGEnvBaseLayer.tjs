/**
 * キャラクタ用座標補正対応レイヤ
 */
class EnvBaseGraphicLayer extends EnvGraphicLayer {

	/**
	 * コンストラクタ
	 */
	function EnvBaseGraphicLayer(win, par, owner) {
		// 親コンストラクタ
		super.EnvGraphicLayer(win, par, owner);
	}

	/**
	 * オフセット情報の初期化
	 */
	function updateOffsetInfo() {
		if (owner !== void) {
			// カメラ原点補正の逆補正
			xoffset = ownerenv.cameraox * (1 - 100.0 / levelz);
			yoffset = ownerenv.cameraoy * (1 - 100.0 / levelz);
		}
	}
};

/**
 * ベースになっているレイヤ
 * event レイヤの参照に用いる
 */
class KAGEnvBaseLayer extends KAGEnvLayer {

	/**
	 * 表示処理用の自動トランジションの指定
	 */
	function setDispAutoTrans() {
		setAutoTrans([env.envinfo.eventTrans, env.envinfo.envTrans]);
	}
	
    /**
	 * コンストラクタ
     * @param env 環境
	 * @param name 環境のレイヤ名
	 */
	function KAGEnvBaseLayer(env, name, absolute) {
		super.KAGEnvLayer(env, name);
		this.absolute = absolute;
		layerClass = global.EnvBaseGraphicLayer;
	}

    function setImageFile(file, elm) {

		initFile(elm);
		clearFileState();

		var eventTrans;
        
		var eventInfo;
		if (env.events !== void) {
			eventInfo = env.events[file];
		}
		if (eventInfo !== void) {
			eventTrans = eventInfo.trans;
			imageFile = eventInfo.image !== void ? eventInfo.image : v;
			xpos = elm.xpos !== void ? (int)elm.xpos : eventInfo.xoff;
			ypos = elm.ypos !== void ? (int)elm.ypos : eventInfo.yoff;
		} else {
			imageFile = file;
			xpos = elm.xpos !== void ? (int)elm.xpos : void;
			ypos = elm.ypos !== void ? (int)elm.ypos : void;
		}
		disp = SHOW;
		redraw = true;
		reposition = true;
		setAutoTrans([eventTrans, env.envinfo.eventTrans, env.envinfo.envTrans]);
		
		// 記録
		if (elm.noflag === void) {
			kag.sflags["cg_" + (file.toUpperCase())] = true;
		}
		
        return true;
    }

    var layerCommands = %[];
}
